@page "/addmember"

@inject ILogger<AddMember> _logger;

@using ChessClub.API.Models
@using ChessClub.UI.Client

<PageTitle>Chess Club - @_pageTitle</PageTitle>

<h1>@_pageTitle</h1>

<EditForm Model="_memberToCreate" OnValidSubmit="CreateMember">
	<div class="form-group mb-3">
		<label for="Name">Name</label>
		<InputText @bind-Value="_memberToCreate.Name" class="form-control" id="postName"></InputText>

		<label for="Surname">Surname</label>
		<InputText @bind-Value="_memberToCreate.Surname" class="form-control" id="postSurname"></InputText>
		
		<label for="Email">Email</label>
		<InputText @bind-Value="_memberToCreate.Email" class="form-control" id="postEmail"></InputText>
		
		<label for="Birthday">Birthday</label>
		<InputDate @bind-Value="_memberToCreate.Birthday" class="form-control" id="postBirthday"></InputDate>

		<DataAnnotationsValidator />
		<ValidationSummary />

		<button class="btn btn-success m-3" type="submit">Save</button>
		<button class="btn btn-secondary" @onclick="navigateBack">Cancel</button>
	</div>
</EditForm>

@code {
	[Inject] ChessClubClient _chessClubClient { get; set; }
	[Inject] NavigationManager navigationManager { get; set; }
	private string _pageTitle = "Add member";

	private AddMemberRequest _memberToCreate = new AddMemberRequest
	{
		Birthday = DateTime.Now
	};

	private async Task CreateMember()
	{
		_logger.LogInformation("Method: {method}", nameof(CreateMember));

		try
		{
			var result = await _chessClubClient.AddMemberAsync(_memberToCreate);
		}
		catch (Exception ex)
		{
			_logger.LogError(ex, "Method: {method} - Exception: {message}", nameof(CreateMember), ex.Message);

			return;
		}

		navigateBack();
	}

	private void navigateBack()
	{
		_logger.LogInformation("Method: {method}", nameof(navigateBack));

		navigationManager.NavigateTo("/members");
	}
}
